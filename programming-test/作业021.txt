;;;;Given a constant K and a singly linked list L, you are supposed to reverse the links of every K elements on L. For example, given L being 1¡ú2¡ú3¡ú4¡ú5¡ú6, if K = 3, then you must output 3¡ú2¡ú1¡ú6¡ú5¡ú4; if K = 4, you must output 4¡ú3¡ú2¡ú1¡ú5¡ú6.
;;;;
;;;;Input Specification:
;;;;
;;;;Each input file contains one test case. For each case, the first line contains the address of the first node, a positive N (<= 105) which is the total number of nodes, and a positive K (<=N) which is the length of the sublist to be reversed. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.
;;;;
;;;;Then N lines follow, each describes a node in the format:
;;;;
;;;;Address Data Next
;;;;
;;;;where Address is the position of the node, Data is an integer, and Next is the position of the next node.
;;;;
;;;;Output Specification:
;;;;
;;;;For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.
;;;;
;;;;Sample Input:
;;;;00100 6 4
;;;;00000 4 99999
;;;;00100 1 12309
;;;;68237 6 -1
;;;;33218 3 00000
;;;;99999 5 68237
;;;;12309 2 33218
;;;;Sample Output:
;;;;00000 4 33218
;;;;33218 3 12309
;;;;12309 2 00100
;;;;00100 1 99999
;;;;99999 5 68237
;;;;68237 6 -1


(defun reversing-linked-list (lst k)
	   (let ((res (reverse (subseq lst 0 k))))
	     (append  res (subseq lst k))))

(defun connect-data (lst data)
	   (if (eql (car (cdr (cdr data))) (car (car lst)))
	       (push data lst)
	       (if (eql (car (cdr (cdr (car (last lst)))))(car data))
		   (append lst (list data))
		   (list data))))

(defun connectable (lst data)
	   (or (eql (car (cdr (cdr data))) (car (car lst)))
	       (eql (car (cdr (cdr (car (last lst)))))(car data))))

(defun sort-data-link (data-link)
	   (let ((res nil))
	     (push (find -1 data-link :key (lambda (x)(car(cdr(cdr x))))) res)
	     (do ((data-link-removed (remove -1 data-link :key (lambda (x)(car(cdr(cdr x))))) (remove (car(car res)) data-link-removed :key (lambda (x) (car x)))))
		 ((eql (length data-link)(length res)) res)
	       (push (find (car (car res)) data-link-removed :key (lambda (x) (car (cdr (cdr x))))) res)))) 

(defun output (data-link)
	   (dolist (lst data-link)
	     (format t "~5,'0d " (car lst))
	     (format t "~a " (car(cdr lst)))
	     (if (eql (car (cdr (cdr lst))) -1)
		 (format t "~a" -1)
		 (format t "~5,'0d~%" (car (cdr (cdr lst)))))))

(defun main ()
	   (let ((head (read))(num (read))(reverse-k (read))(temp nil))
	     (progn 
	       (dotimes (i num)
		   (push (list (read)(read)(read)) temp))
	       (output (reversing-linked-list (sort-data-link temp) reverse-k)))))

(defun link-link (data1 data2)
	   (setf (car (cdr (cdr data1))) (car data2)))

(defun fix-data (data-link)
	   (do* ((i 0 (+ i 1))
		 (first-tail (nth i data-link) (nth i data-link))
		 (second-head (nth (+ i 1) data-link) (nth (+ i 1) data-link)))
		((or (eql first-tail second-head)(null second-head)) 
		 data-link)
	     (setf (car(cdr(cdr(nth i data-link)))) (car(nth (+ i 1) data-link)))))